import{r as o,cN as f,cs as w,R as p,S as n,cL as y,t as _,$ as V,a1 as v}from"./index.1985521f.js";import{s as C}from"./utils.ad868521.js";import{r as b}from"./GroupContainer.031b041d.js";import{f as T,u as H}from"./LayerView.cde178db.js";import{i as g}from"./GraphicContainer.5447100b.js";import{a as m}from"./BaseGraphicContainer.476eeaa6.js";import"./Utils.1f5b6bd7.js";import"./number.6e30c64a.js";import"./definitions.cd8c5521.js";import"./enums.c60b1dad.js";import"./Texture.df75317b.js";import"./VertexElementDescriptor.2400a91d.js";import"./MaterialKey.50628e38.js";import"./alignmentUtils.84250e5d.js";import"./WGLContainer.ee4fac61.js";import"./pixelUtils.784e90c3.js";import"./VertexArrayObject.61da39b7.js";import"./ProgramTemplate.40308da0.js";import"./StyleDefinition.51d53a2e.js";import"./config.ded6d251.js";import"./GeometryUtils.b4d0dc88.js";import"./earcut.f65e2fcc.js";import"./CIMSymbolHelper.6438e485.js";import"./Rect.a122c453.js";import"./GeometryUtils.f3664fe1.js";import"./normalizeUtilsSync.792f4e40.js";import"./projectionSupport.4aed025e.js";import"./json.8bd707cf.js";import"./FeatureContainer.28dca56e.js";import"./TileContainer.02f65f97.js";import"./visualVariablesUtils.884d3bde.js";import"./visualVariablesUtils.10b31a9d.js";import"./Matcher.7af2fe62.js";import"./tileUtils.a755e3d4.js";import"./TileClipper.5bd7dcb4.js";import"./Geometry.f2d62961.js";import"./cimAnalyzer.b547d5ab.js";import"./quantizationUtils.4ec6f0b3.js";import"./ExpandedCIM.bbcfc6ca.js";import"./schemaUtils.51235f56.js";import"./createSymbolSchema.a8baa8ce.js";import"./MD5.7323a015.js";import"./util.0cc07af3.js";import"./ComputedAttributeStorage.e1077482.js";import"./centroid.ca7c664b.js";import"./vec3f32.ca7a14c1.js";const d="sublayers",l="layerView",I=Object.freeze({remove(){},pause(){},resume(){}});let c=class extends T(H){constructor(){super(...arguments),this._highlightIds=new Map,this.container=new b}async fetchPopupFeatures(i){return Array.from(this.graphicsViews(),t=>t.hitTest(i).filter(e=>!!e.popupTemplate)).flat()}*graphicsViews(){o(this._graphicsViewsFeatureCollectionMap)?yield*this._graphicsViewsFeatureCollectionMap.keys():o(this._graphicsViews)?yield*this._graphicsViews:yield*[]}async hitTest(i,t){return Array.from(this.graphicsViews(),e=>{const s=e.hitTest(i);if(o(this._graphicsViewsFeatureCollectionMap)){const h=this._graphicsViewsFeatureCollectionMap.get(e);for(const r of s)!r.popupTemplate&&h.popupTemplate&&(r.popupTemplate=h.popupTemplate)}return s}).flat().map(e=>({type:"graphic",graphic:e,layer:this.layer,mapPoint:i}))}highlight(i){let t;return typeof i=="number"?t=[i]:i instanceof f?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(e=>e&&e.uid):w.isCollection(i)&&(t=i.map(e=>e&&e.uid).toArray()),t=t.filter(e=>e!=null),t.length?(this._addHighlight(t),{remove:()=>{this._removeHighlight(t)}}):I}update(i){for(const t of this.graphicsViews())t.processUpdate(i)}attach(){const i=this.view,t=()=>this.requestUpdate(),e=this.layer.featureCollections;if(o(e)&&e.length){this._graphicsViewsFeatureCollectionMap=new Map;for(const s of e){const h=new g(this.view.featuresTilingScheme);h.fadeTransitionEnabled=!0;const r=new m({view:i,graphics:s.source,renderer:s.renderer,requestUpdateCallback:t,container:h});this._graphicsViewsFeatureCollectionMap.set(r,s),this.container.addChild(r.container),this.handles.add([p(()=>s.visible,a=>r.container.visible=a,n),p(()=>r.updating,()=>this.notifyChange("updating"),n)],l)}this._updateHighlight()}else o(this.layer.sublayers)&&this.handles.add(y(()=>this.layer.sublayers,"change",()=>this._createGraphicsViews(),{onListenerAdd:()=>this._createGraphicsViews(),onListenerRemove:()=>this._destroyGraphicsViews()}),d)}detach(){this._destroyGraphicsViews(),this.handles.remove(d)}moveStart(){}moveEnd(){}viewChange(){for(const i of this.graphicsViews())i.viewChange()}isUpdating(){for(const i of this.graphicsViews())if(i.updating)return!0;return!1}_destroyGraphicsViews(){this.container.removeAllChildren(),this.handles.remove(l);for(const i of this.graphicsViews())i.destroy();this._graphicsViews=null,this._graphicsViewsFeatureCollectionMap=null}_createGraphicsViews(){if(this._destroyGraphicsViews(),_(this.layer.sublayers))return;const i=[],t=this.view,e=()=>this.requestUpdate();for(const s of this.layer.sublayers){const h=new C,r=new g(this.view.featuresTilingScheme);r.fadeTransitionEnabled=!0;const a=new m({view:t,graphics:s.graphics,requestUpdateCallback:e,container:r});this.handles.add([s.on("graphic-update",a.graphicUpdateHandler),p(()=>s.visible,u=>a.container.visible=u,n),p(()=>a.updating,()=>this.notifyChange("updating"),n)],l),h.addChild(a.container),this.container.addChild(h),i.push(a)}this._graphicsViews=i,this._updateHighlight()}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t);this._highlightIds.set(t,e+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t)-1;e===0?this._highlightIds.delete(t):this._highlightIds.set(t,e)}this._updateHighlight()}_updateHighlight(){const i=Array.from(this._highlightIds.keys());for(const t of this.graphicsViews())t.setHighlight(i)}};c=V([v("esri.views.2d.layers.MapNotesLayerView2D")],c);const _i=c;export{_i as default};
