import{cN as s,cs as p,$ as h,a0 as a,a1 as o}from"./index.1985521f.js";import{f as g,u as m}from"./LayerView.cde178db.js";import{i as l}from"./GraphicContainer.5447100b.js";import{a as c}from"./BaseGraphicContainer.476eeaa6.js";import"./utils.ad868521.js";import"./Utils.1f5b6bd7.js";import"./number.6e30c64a.js";import"./definitions.cd8c5521.js";import"./enums.c60b1dad.js";import"./Texture.df75317b.js";import"./VertexElementDescriptor.2400a91d.js";import"./MaterialKey.50628e38.js";import"./alignmentUtils.84250e5d.js";import"./CIMSymbolHelper.6438e485.js";import"./Rect.a122c453.js";import"./GeometryUtils.f3664fe1.js";import"./normalizeUtilsSync.792f4e40.js";import"./projectionSupport.4aed025e.js";import"./json.8bd707cf.js";import"./VertexArrayObject.61da39b7.js";import"./FeatureContainer.28dca56e.js";import"./TileContainer.02f65f97.js";import"./WGLContainer.ee4fac61.js";import"./pixelUtils.784e90c3.js";import"./ProgramTemplate.40308da0.js";import"./StyleDefinition.51d53a2e.js";import"./config.ded6d251.js";import"./GeometryUtils.b4d0dc88.js";import"./earcut.f65e2fcc.js";import"./visualVariablesUtils.884d3bde.js";import"./visualVariablesUtils.10b31a9d.js";import"./Matcher.7af2fe62.js";import"./tileUtils.a755e3d4.js";import"./TileClipper.5bd7dcb4.js";import"./Geometry.f2d62961.js";import"./cimAnalyzer.b547d5ab.js";import"./quantizationUtils.4ec6f0b3.js";import"./ExpandedCIM.bbcfc6ca.js";import"./schemaUtils.51235f56.js";import"./createSymbolSchema.a8baa8ce.js";import"./MD5.7323a015.js";import"./util.0cc07af3.js";import"./ComputedAttributeStorage.e1077482.js";import"./centroid.ca7c664b.js";import"./vec3f32.ca7a14c1.js";const n={remove(){},pause(){},resume(){}};let r=class extends g(m){constructor(){super(...arguments),this._highlightIds=new Map}attach(){this.graphicsView=new c({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new l(this.view.featuresTilingScheme)}),this._updateHighlight(),this.container.addChild(this.graphicsView.container),this.handles.add(this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler),"graphicslayerview2d")}detach(){this.container.removeAllChildren(),this.graphicsView.destroy(),this.graphicsView=null,this.handles.remove("graphicslayerview2d")}async hitTest(i){return this.graphicsView?this.graphicsView.hitTest(i).map(t=>({type:"graphic",graphic:t,mapPoint:i,layer:this.layer})):null}async fetchPopupFeatures(i){if(this.graphicsView)return this.graphicsView.hitTest(i).filter(t=>!!t.popupTemplate)}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}update(i){this.graphicsView.processUpdate(i)}moveStart(){}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(i){let t;return typeof i=="number"?t=[i]:i instanceof s?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(e=>e&&e.uid):p.isCollection(i)&&i.length>0&&(t=i.map(e=>e&&e.uid).toArray()),t=t==null?void 0:t.filter(e=>e!=null),t.length?(this._addHighlight(t),{remove:()=>this._removeHighlight(t)}):n}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t);this._highlightIds.set(t,e+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t)-1;e===0?this._highlightIds.delete(t):this._highlightIds.set(t,e)}this._updateHighlight()}_updateHighlight(){var i;(i=this.graphicsView)==null||i.setHighlight(Array.from(this._highlightIds.keys()))}};h([a()],r.prototype,"graphicsView",void 0),r=h([o("esri.views.2d.layers.GraphicsLayerView2D")],r);const si=r;export{si as default};
